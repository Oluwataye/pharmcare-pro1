
import { InventoryItem } from "../types/inventory";

// Save inventory to local storage
export const saveInventoryToLocalStorage = (inventory: InventoryItem[]): void => {
  localStorage.setItem('INVENTORY_DATA', JSON.stringify(inventory));
};

// Load inventory from local storage
export const loadInventoryFromLocalStorage = (): InventoryItem[] | null => {
  const savedInventory = localStorage.getItem('INVENTORY_DATA');
  return savedInventory ? JSON.parse(savedInventory) : null;
};

// Validate inventory item
export const validateInventoryItem = (item: Partial<InventoryItem>): { valid: boolean; message: string } => {
  if (!item.name || item.name.trim() === "") {
    return { valid: false, message: "Product name is required" };
  }
  if (!item.sku || item.sku.trim() === "") {
    return { valid: false, message: "SKU is required" };
  }
  if (!item.category || item.category.trim() === "") {
    return { valid: false, message: "Category is required" };
  }
  if (item.quantity === undefined || item.quantity < 0) {
    return { valid: false, message: "Quantity must be 0 or greater" };
  }
  if (item.price === undefined || item.price < 0) {
    return { valid: false, message: "Price must be 0 or greater" };
  }
  if (item.reorderLevel === undefined || item.reorderLevel < 0) {
    return { valid: false, message: "Reorder level must be 0 or greater" };
  }
  
  // Check if expiry date is valid if provided
  if (item.expiryDate) {
    const expiryDate = new Date(item.expiryDate);
    if (isNaN(expiryDate.getTime())) {
      return { valid: false, message: "Invalid expiry date format" };
    }
  }
  
  return { valid: true, message: "" };
};

// Get category list from inventory
export const getCategories = (inventory: InventoryItem[]): string[] => {
  const categories = inventory.map(item => item.category);
  return [...new Set(categories)].sort();
};

// Get expiring items from inventory
export const getExpiringItems = (inventory: InventoryItem[], daysThreshold: number = 90): InventoryItem[] => {
  const today = new Date();
  const thresholdDate = new Date();
  thresholdDate.setDate(today.getDate() + daysThreshold);
  
  return inventory.filter(item => {
    if (!item.expiryDate) return false;
    const expiryDate = new Date(item.expiryDate);
    return expiryDate <= thresholdDate && expiryDate >= today;
  });
};

// Generate print content for inventory
export const generateInventoryReport = (inventory: InventoryItem[], username: string): string => {
  return `
    <html>
      <head>
        <title>Inventory Report</title>
        <style>
          @media print {
            body { font-family: system-ui, -apple-system, sans-serif; }
            table { width: 100%; border-collapse: collapse; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f5f5f5; }
            .header { text-align: center; margin-bottom: 20px; }
            @page { margin: 0.5cm; }
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Inventory Report</h1>
          <p>${new Date().toLocaleDateString()}</p>
          <p>Generated by: ${username || 'Unknown'}</p>
        </div>
        <table>
          <thead>
            <tr>
              <th>Product</th>
              <th>SKU</th>
              <th>Category</th>
              <th>Quantity</th>
              <th>Price</th>
              <th>Expiry Date</th>
              <th>Last Updated</th>
            </tr>
          </thead>
          <tbody>
            ${inventory
              .map(
                (item) => `
              <tr>
                <td>${item.name}</td>
                <td>${item.sku}</td>
                <td>${item.category}</td>
                <td>${item.quantity} ${item.unit}</td>
                <td>â‚¦${item.price.toLocaleString()}</td>
                <td>${item.expiryDate ? new Date(item.expiryDate).toLocaleDateString() : 'N/A'}</td>
                <td>${item.lastUpdatedBy || 'Unknown'} (${item.lastUpdatedAt ? new Date(item.lastUpdatedAt).toLocaleDateString() : 'N/A'})</td>
              </tr>
            `
              )
              .join("")}
          </tbody>
        </table>
      </body>
    </html>
  `;
};
