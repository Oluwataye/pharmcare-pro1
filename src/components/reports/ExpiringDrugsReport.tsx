
import * as React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { useInventory, InventoryItem } from "@/hooks/useInventory";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Calendar, Printer, Filter, AlertTriangle } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const ExpiringDrugsReport = () => {
  const [filterDays, setFilterDays] = React.useState<number>(90);
  const { inventory, getExpiringItems } = useInventory();
  const { user } = useAuth();
  const { toast } = useToast();
  
  // Get expiring items based on the selected filter
  const expiringItems = getExpiringItems(filterDays);
  
  // Calculate statistics
  const totalExpiring = expiringItems.length;
  const criticalExpiring = getExpiringItems(30).length;
  
  // Filter options for expiry timeframes
  const filterOptions = [
    { label: "Next 30 days", value: 30 },
    { label: "Next 90 days", value: 90 },
    { label: "Next 180 days", value: 180 },
    { label: "Next 365 days", value: 365 },
  ];

  const handlePrintReport = () => {
    try {
      // Create print content
      const printContent = `
        <html>
          <head>
            <title>Expiring Drugs Report</title>
            <style>
              @media print {
                body { font-family: system-ui, -apple-system, sans-serif; }
                table { width: 100%; border-collapse: collapse; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f5f5f5; }
                .header { text-align: center; margin-bottom: 20px; }
                .critical { background-color: #fee2e2; }
                .warning { background-color: #fef3c7; }
                @page { margin: 0.5cm; }
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>Expiring Drugs Report</h1>
              <p>${new Date().toLocaleDateString()}</p>
              <p>Generated by: ${user ? user.username || user.name : 'Unknown'}</p>
              <p>Timeframe: Expiring in the next ${filterDays} days</p>
            </div>
            <table>
              <thead>
                <tr>
                  <th>Product</th>
                  <th>Category</th>
                  <th>Batch Number</th>
                  <th>Quantity</th>
                  <th>Expiry Date</th>
                  <th>Days Remaining</th>
                  <th>Manufacturer</th>
                </tr>
              </thead>
              <tbody>
                ${expiringItems
                  .map(
                    (item) => {
                      const expiryDate = new Date(item.expiryDate || new Date());
                      const today = new Date();
                      const daysRemaining = Math.ceil((expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
                      const rowClass = daysRemaining <= 30 ? 'critical' : 'warning';
                      
                      return `
                        <tr class="${rowClass}">
                          <td>${item.name}</td>
                          <td>${item.category}</td>
                          <td>${item.batchNumber || 'N/A'}</td>
                          <td>${item.quantity} ${item.unit}</td>
                          <td>${expiryDate.toLocaleDateString()}</td>
                          <td>${daysRemaining}</td>
                          <td>${item.manufacturer || 'N/A'}</td>
                        </tr>
                      `;
                    }
                  )
                  .join("")}
              </tbody>
            </table>
          </body>
        </html>
      `;

      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(printContent);
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
        printWindow.close();
      }

      toast({
        title: "Success",
        description: "Expiring drugs report sent to printer",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to print report",
        variant: "destructive",
      });
    }
  };

  // Format date and calculate days remaining
  const calculateDaysRemaining = (expiryDateString: string | undefined): number => {
    if (!expiryDateString) return 0;
    const expiryDate = new Date(expiryDateString);
    const today = new Date();
    return Math.ceil((expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
  };
  
  // Get severity class based on days remaining
  const getSeverityClass = (daysRemaining: number): string => {
    if (daysRemaining <= 30) return "text-red-600 font-medium";
    if (daysRemaining <= 90) return "text-amber-600 font-medium";
    return "text-green-600 font-medium";
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <div>
            <CardTitle className="text-xl flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-amber-500" />
              Expiring Drugs Report
            </CardTitle>
          </div>
          <div className="flex items-center space-x-2">
            <Select
              value={filterDays.toString()}
              onValueChange={(value) => setFilterDays(parseInt(value))}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by timeframe" />
              </SelectTrigger>
              <SelectContent>
                {filterOptions.map((option) => (
                  <SelectItem key={option.value} value={option.value.toString()}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Button
              variant="outline"
              size="icon"
              onClick={handlePrintReport}
              className="shrink-0"
            >
              <Printer className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <Card>
              <CardContent className="pt-6">
                <div className="text-2xl font-bold">{totalExpiring}</div>
                <p className="text-xs text-muted-foreground">
                  Total Expiring Products
                </p>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="pt-6">
                <div className="text-2xl font-bold text-red-600">{criticalExpiring}</div>
                <p className="text-xs text-muted-foreground">
                  Critical (Next 30 Days)
                </p>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="pt-6">
                <div className="text-2xl font-bold">{(totalExpiring / inventory.length * 100).toFixed(1)}%</div>
                <p className="text-xs text-muted-foreground">
                  % of Inventory Expiring
                </p>
              </CardContent>
            </Card>
          </div>

          {expiringItems.length > 0 ? (
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Product Name</TableHead>
                    <TableHead>Category</TableHead>
                    <TableHead>Batch Number</TableHead>
                    <TableHead>Quantity</TableHead>
                    <TableHead>Expiry Date</TableHead>
                    <TableHead>Days Remaining</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {expiringItems.map((item) => {
                    const daysRemaining = calculateDaysRemaining(item.expiryDate);
                    const severityClass = getSeverityClass(daysRemaining);
                    
                    return (
                      <TableRow key={item.id}>
                        <TableCell className="font-medium">{item.name}</TableCell>
                        <TableCell>{item.category}</TableCell>
                        <TableCell>{item.batchNumber || "N/A"}</TableCell>
                        <TableCell>
                          {item.quantity} {item.unit}
                        </TableCell>
                        <TableCell>
                          {item.expiryDate ? new Date(item.expiryDate).toLocaleDateString() : "N/A"}
                        </TableCell>
                        <TableCell className={severityClass}>
                          {daysRemaining} days
                        </TableCell>
                        <TableCell>
                          {daysRemaining <= 30 ? (
                            <span className="text-xs bg-red-100 text-red-800 py-1 px-2 rounded-full font-medium">
                              Critical
                            </span>
                          ) : daysRemaining <= 90 ? (
                            <span className="text-xs bg-amber-100 text-amber-800 py-1 px-2 rounded-full font-medium">
                              Warning
                            </span>
                          ) : (
                            <span className="text-xs bg-green-100 text-green-800 py-1 px-2 rounded-full font-medium">
                              Upcoming
                            </span>
                          )}
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </div>
          ) : (
            <div className="text-center py-10">
              <AlertTriangle className="h-10 w-10 text-muted-foreground mx-auto mb-2" />
              <p className="text-lg font-medium">No expiring drugs found</p>
              <p className="text-sm text-muted-foreground">
                No products are expiring in the next {filterDays} days
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default ExpiringDrugsReport;
